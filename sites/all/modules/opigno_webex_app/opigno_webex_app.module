<?php
/**
 * @file
 * Opigno webex app module file
 *
 * @author James Aparicio
 */

function opigno_webex_app_permission() {
  return array(
    'configure webex' => array(
      'title' => t('Configure WebEx'),
      'description' => t('Allows the user to configure WebEx account'),
    ),
  );
}

function opigno_webex_app_og_permission() {
  return array(
    'start meetings' => array(
      'title' => t('Start meetings'),
      'description' => t('Allows the user to create WebEx meetings'),
    ),
    'attend meetings' => array(
      'title' => t('Attend meetings'),
      'description' => t('Allows the user to attend meetings'),
    ),
  );
}


function opigno_webex_app_opigno_tool($node = NULL) {
  return array(
    'meetings' => array(
      'name' => t("Meetings (Web conferencing)"),
      'path' => isset($node) ? "node/{$node->nid}/WebEx" : '',
      'description' => t("Allows students to attend meetings and teachers to create meetings"),
      'actions' => array(
        'create_meeting' => array(
          'title' => t("Create meeting"),
          'href' => 'node/add/webex-video-conference',
          'access_arguments' => array('node', isset($node) ? $node->nid : 0, 'create meeting content'),
          'access_callback' => 'og_user_access',
          'query' => array(
            'og_group_ref' => isset($node) ? $node->nid : '',
          )
        ),
      ),
    ),
  );
}

function opigno_webex_app_menu() {
  return array(
    'WebEx' => array(
      'title' => "Meettings",
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_my_meetings',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'node/%/WebEx' => array(
      'title' => 'Meetings',
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_course_meetings',
      'access callback' => 'og_user_access',
      'access arguments' => array('node',1, 'attend meetings'),
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'admin/opigno/system/webex' => array(
      'title' => 'WebEx configuration',
      'description' => 'The congiguration for the WebEx integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'opigno_webex_app_webex_edit_form',
      ),
      'access arguments' => array(
        'configure webex',
      ),
    )
  );
}

function opigno_get_my_meetings() {
  Global $user;
  $today = date('Y-m-d 00:00:00');
  $my_groups = og_get_groups_by_user($user);
  $meetings = node_load_multiple(array(), array('type' => "webex_video_conference"));
  if (isset($my_groups['node'])) {
    foreach ($my_groups['node'] as $anid) {
      $vars[$anid] = array();
      foreach ($meetings as $meetingnid => $meeting) {
        $lookfor['target_id'] = $anid;
        if ($meeting->opigno_calendar_date[LANGUAGE_NONE][0]['value'] > $today) {
          foreach ($meeting->og_group_ref[LANGUAGE_NONE] as $aref) {
            if ($aref == $lookfor) {
              $vars[$anid][$meetingnid] = $meetingnid;
            }
          }
        }
      }
    }
  }
  return theme_opigno_webex_app_meetings($vars);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function opigno_webex_app_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'node/%/WebEx') {
    $gid = arg(1);
    if (og_user_access('node',$gid,'create webex_video_conference content')) {
      $item = menu_get_item('node/add/webex-video-conference');
      $item['title'] = t("Create meeting");
      $item['options']['query']['og_group_ref'] = $item['localized_options']['query']['og_group_ref'] = $gid;
      $item['options']['attributes']['class'][] = $item['localized_options']['attributes']['class'][] = 'opigno-webex-meeting-add';
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


function opigno_get_course_meetings($nodeid) {
  $node=node_load($nodeid);
  $today = date('Y-m-d 00:00:00');
  $header = array(t("@nodetitle meetings",array('@nodetitle' => $node->title)),"","");
  $rows = array();
  $meetings = node_load_multiple(array(), array('type' => "webex_video_conference"));
  foreach ($meetings as $meetingnid => $meeting) {
    $lookfor['target_id'] = $node->nid;
    $meeting_node = node_load($meetingnid);
    if (format_date(strtotime($meeting->opigno_calendar_date[LANGUAGE_NONE][0]['value'].' '.$meeting->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db']),'medium',"Y-m-d H:i:s") > $today) {
      foreach ($meeting->og_group_ref[LANGUAGE_NONE] as $aref) {
        if ($aref == $lookfor) {
          if (opigno_webex_meeting_has_started(opigno_webex_app_get_meeting_link($meetingnid)) == TRUE) {
            $message = l(t("Join Meeting"), opigno_webex_app_get_meeting_link($meetingnid), array('attributes' => array('target' => '_blank')));
          }
          elseif (og_user_access('node', $node->nid, 'start meetings')) {
            foreach($meeting->meeting_id as $lang => $value)
            {
              $meeting_id=$value[0]['value'];
            }
            $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
            $message = l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_webex_app_webex_user')."&PW=".variable_get('opigno_webex_app_webex_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
          }
          else {
            $check=true;
            $message = t("Meeting has not started (please stand by)");
          }
          if ($check==true)
          {
            $class="opigno-webex-app-nolink";
          }
          else
          {
            $class="opigno-webex-app-link";
          }
          $rows[] = array(
            'data' => array(
              $meeting_node->title,
              format_date(strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'].' '.$meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db']),'medium',"Y-m-d H:i:s"),
              array('data' => $message,'class' => $class),
            ),
          );
        }
      }
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function opigno_webex_app_node_view($node, $view_mode, $langcode) {
  if (($node->type == "webex_video_conference") && ($view_mode == 'full')) {
    foreach($node->meeting_id as $lang => $value)
    {
      $meeting_id=$value[0]['value'];
    }
    $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
    $node->content['start_meeting'] = array(
      '#markup' => l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_webex_app_webex_user')."&PW=".variable_get('opigno_webex_app_webex_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank'))),
      '#weight' => 10,
    );
  }
}

function opigno_webex_app_get_meeting_link($nid) {
  Global $user;
  $node = node_load($nid);
  foreach($node->meeting_id as $lang => $value)
  {
    $meeting_id=$value[0]['value'];
  }
  foreach($node->meeting_password as $lang => $value)
  {
    $meeting_password=$value[0]['value'];
  }
  return variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=JM&MK=' . $meeting_id . '&AN=' . $user->name . '&AE=' . $user->mail . '&PW=' . $meeting_password; //.'&BU=http://localhost/opignov3';
}

function theme_opigno_webex_app_meetings($vars) {
  $header = array(
    array(
      'data' => t("My Scheduled meetings"),
    )
  );
  $rows = array();
  foreach ($vars as $nid => $var) {
    $va_[$nid] = $var;
    $rows[] = array('data' => array(theme_opigno_webex_app_meeting($va_)));
    $va_ = NULL;
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function theme_opigno_webex_app_meeting($vars) {
  $node = node_load(key($vars));
  $header = array(
    array(
      'data' => $node->title,
    )
  );
  $rows = array();
  foreach ($vars[$node->nid] as $meetingnid => $meeting_nid) {
    $meeting_node = node_load($meeting_nid);
    if (opigno_webex_meeting_has_started(opigno_webex_app_get_meeting_link($meeting_nid)) == TRUE) {
      $message = l(t("Join Meeting"), opigno_webex_app_get_meeting_link($meeting_nid), array('attributes' => array('target' => '_blank')));
    }
    elseif (og_user_access('node', $node->nid, 'start meetings')) {
      foreach($meeting_node->meeting_id as $lang => $value)
      {
        $meeting_id=$value[0]['value'];
      }
      $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
      $message = l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_webex_app_webex_user')."&PW=".variable_get('opigno_webex_app_webex_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
    }
    else {
      $message = "Meeting has not started (please stand by)";
    }
    $rows[] = array(
      'data' => array(
        $meeting_node->title,
        $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'],
        $message
      )
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function opigno_webex_meeting_has_started($url) {

  if (!function_exists('curl_init')) {
    die('Sorry cURL is not installed!');
  }
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_USERAGENT, "MozillaXYZ/1.0");
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $output = curl_exec($ch);
  curl_close($ch);

  if (strpos($output, 'FAIL') !== FALSE) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function opigno_webex_app_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == "webex_video_conference_node_form") && ((strpos($form['#action'], 'add') !== FALSE) || (strpos($form['#action'], 'edit') !== FALSE))) {
    $form['meeting_id']['#type'] = 'hidden';
    $form['#validate'][] = 'opigno_webex_app_meeting_form_validation';
    if (strpos($form['#action'], 'edit') !== FALSE)
    {
    $form['meeting_password']['#type'] = 'hidden';
    }
  }
}

function opigno_webex_app_meeting_form_validation($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] != 'Delete') {
    module_load_include('php', 'opigno_webex_app', 'WebexAPI.class');
    if (strpos($form['#action'], 'add') !== FALSE) {
      $isnew = TRUE;
      $node = new stdClass();
      $node->title = $form_state['values']['title'];
        foreach($form_state['values']['meeting_password'] as $lang1 => $value1)
        {
          $node->meeting_password[$lang1][0]['value']=$form_state['values']['meeting_password'][$lang1][0]['value'];
        }
      $node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] = $form_state['values']['opigno_calendar_date'][LANGUAGE_NONE][0]['value'];
    }
    if (strpos($form['#action'], 'edit') !== FALSE) {
      $isnew = FALSE;
      $node = node_load($form['nid']['#value']);
    }
    $meeting = new WebexAPI();
    $meetingkey = $meeting->getmeetingWebex($node, $isnew);
    if ($meetingkey == 0) {
      form_set_error('NULL', t('Could not create/edit meeting, Webex service down or configuration incorrect'));
    }
    if ($isnew == TRUE) {
      foreach($form_state['values']['meeting_id'] as $lang => $value)
      {
        $form_state['values']['meeting_id'][$lang][0]['value'] = $meetingkey;
      }
    }
  }
}


function opigno_webex_app_webex_edit_form($form, &$form_state) {

  $webex_info = new stdClass();
  $webex_info->webex_user = variable_get('opigno_webex_app_webex_user');
  $webex_info->webex_password = variable_get('opigno_webex_app_webex_password');
  $webex_info->webex_sid = variable_get('opigno_webex_app_webex_sid');
  $webex_info->webex_pid = variable_get('opigno_webex_app_webex_pid');
  $all = variable_get('opigno_webex_app_webex_url');
  $explode1 = explode('://', $all);
  if (isset($explode1[1]))
  {
  $explode2 = explode('.webex', $explode1[1]);
  $webex_info->webex_url = $explode2[0];
  }
  $form['webex_user'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Username'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_user) ? $webex_info->webex_user : '',
  );
  $form['webex_password'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Password'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_password) ? $webex_info->webex_password : '',
  );
  $form['webex_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Site ID (SID)'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_sid) ? $webex_info->webex_sid : '',
  );
  $form['webex_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner ID (PID)'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_pid) ? $webex_info->webex_pid : '',
  );
  $form['webex_url'] = array(
    '#type' => 'textfield',
    '#description' => t('Please enter the subdomain prefix. Ex: For http://subdomainprefix.webex.com use subdomainprefix'),
    '#title' => t('Subdomain prefix'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_url) ? $webex_info->webex_url : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#validate'][] = 'opigno_webex_app_webex_edit_form_validation';
  return $form;
}

function opigno_webex_app_webex_edit_form_validation($form, &$form_state) {
  $errors = form_get_errors();
  if (empty($errors)) {
    if (opigno_webex_app_authenticate($form_state)) {
      drupal_set_message(t('Configuration is valid and was saved'), 'status');
      variable_set('opigno_webex_app_webex_user', $form_state['values']['webex_user']);
      variable_set('opigno_webex_app_webex_password', $form_state['values']['webex_password']);
      variable_set('opigno_webex_app_webex_sid', $form_state['values']['webex_sid']);
      variable_set('opigno_webex_app_webex_pid', $form_state['values']['webex_pid']);
      variable_set('opigno_webex_app_webex_url', 'https://' . $form_state['values']['webex_url'] . '.webex.com');
      variable_set('opigno_webex_app_webex_full_url', 'https://' . $form_state['values']['webex_url'] . '.webex.com/' . $form_state['values']['webex_url']);
    }
    else {
      form_set_error('NULL', t('Configuration incorrect or WebEx not reachable'));
    }
  }
}

function opigno_webex_app_authenticate($form_state) {

  $webex_post = new stdClass();
  $webex_post->UID = $form_state['values']['webex_user'];
  $webex_post->PWD = $form_state['values']['webex_password'];
  $webex_post->SID = $form_state['values']['webex_sid'];
  $webex_post->PID = $form_state['values']['webex_pid'];
  $webex_post->URL = 'https://' . $form_state['values']['webex_url'] . '.webex.com/';
  $webex_post->XML = '<?xml version="1.0" ?>
    <serv:message xmlns:serv="http://www.webex.com/schemas/2002/06/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <header>
<securityContext>
<webExID>' . $webex_post->UID . '</webExID>
<password>' . $webex_post->PWD . '</password>
<siteID>' . $webex_post->SID . '</siteID>
<partnerID>' . $webex_post->PID . '</partnerID>
</securityContext>
      </header>
      <body><bodyContent xmlns:meet="http://www.webex.com/schemas/2002/06/service/meeting"
        xsi:type="java:com.webex.service.binding.meeting.LstsummaryMeeting">
        </bodyContent>
      </body>
    </serv:message>';

  $post_data = $webex_post;
  $post_url = $webex_post->URL . '/WBXService/XMLService';
  $post_string = '';
  foreach ($post_data as $data_key => $data_value) {
    $post_string .= '' . $data_key . '=' . urlencode($data_value) . '&';
  }
  $post_string = substr($post_string, 0, -1);
  $ch = curl_init();
  // Set the url, number of POST vars, POST data.
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_POST, count($post_data));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = curl_exec($ch);
  dpm($response);
  $webex_error_msg = 'ERROR:<br/><b>RESPONSE:</b><span>' . strip_tags($response) . '</span><br/>
        <br/>
        <b>POSTED DATA:</b><span>' . $post_data->XML . '</span>';
  curl_close($ch);
  if (!empty($response)) {
    $xml_obj = new SimpleXMLElement($response);
    $success = $xml_obj->children('serv', TRUE)->header->response->result;
    $reason = $xml_obj->children('serv', TRUE)->header->response->result;
    if ((string) $success === "SUCCESS") {
      return TRUE;
    }
    else
    {
      $exception = $xml_obj->children('serv', TRUE)->header->response->exceptionID;
      if ((string) $exception==="000015")
      {
        return true;
      }
    }
  }
  return FALSE;
}
